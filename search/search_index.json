{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-soda-core Welcome! Prefect 2.0 collection for Soda Core Getting Started Python setup Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-soda-core with pip : pip install prefect-soda-core Write and run a flow from prefect import flow from prefect_soda_core.soda_configuration import SodaConfiguration from prefect_soda_core.sodacl_check import SodaCLCheck from prefect_soda_core.tasks import soda_scan_execute @flow def run_soda_scan (): soda_configuration_block = SodaConfiguration ( configuration_yaml_path = \"/path/to/config.yaml\" ) sodacl_check_block = SodaCLCheck ( sodacl_yaml_path = \"/path/to/checks.yaml\" ) return soda_scan_execute ( data_source_name = \"my_datasource\" , configuration = soda_configuration_block , checks = soda_check_block , variables = { \"var\" : \"value\" }, verbose = True ) run_soda_scan () Resources If you encounter any bugs while using prefect-soda-core , feel free to open an issue in the prefect-soda-core repository. If you have any questions or issues while using prefect-soda-core , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Development If you'd like to install a version of prefect-soda-core for development, clone the repository and perform an editable install with pip : git clone https://github.com/sodadata/prefect-soda-core.git cd prefect-soda-core/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Home"},{"location":"#prefect-soda-core","text":"","title":"prefect-soda-core"},{"location":"#welcome","text":"Prefect 2.0 collection for Soda Core","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-soda-core with pip : pip install prefect-soda-core","title":"Installation"},{"location":"#write-and-run-a-flow","text":"from prefect import flow from prefect_soda_core.soda_configuration import SodaConfiguration from prefect_soda_core.sodacl_check import SodaCLCheck from prefect_soda_core.tasks import soda_scan_execute @flow def run_soda_scan (): soda_configuration_block = SodaConfiguration ( configuration_yaml_path = \"/path/to/config.yaml\" ) sodacl_check_block = SodaCLCheck ( sodacl_yaml_path = \"/path/to/checks.yaml\" ) return soda_scan_execute ( data_source_name = \"my_datasource\" , configuration = soda_configuration_block , checks = soda_check_block , variables = { \"var\" : \"value\" }, verbose = True ) run_soda_scan ()","title":"Write and run a flow"},{"location":"#resources","text":"If you encounter any bugs while using prefect-soda-core , feel free to open an issue in the prefect-soda-core repository. If you have any questions or issues while using prefect-soda-core , you can find help in either the Prefect Discourse forum or the Prefect Slack community .","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-soda-core for development, clone the repository and perform an editable install with pip : git clone https://github.com/sodadata/prefect-soda-core.git cd prefect-soda-core/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Development"},{"location":"checks/","text":"prefect_soda_core.sodacl_check SodaCL check block SodaCLCheck This block represents a SodaCL check that can be used when running Soda scans. Parameters: Name Type Description Default sodacl_yaml_path str Absolute path of the Soda Checks file. required sodacl_yaml_str str Optional YAML string containing the Soda Checks details. If provided, it will be saved at the path provided with sodacl_yaml_path . required Example from prefect_soda_core.sodacl_check import SodaCLCheck sodacl_check_block = SodaCLCheck . load ( \"BLOCK_NAME\" ) Source code in prefect_soda_core/sodacl_check.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 class SodaCLCheck ( Block ): \"\"\" This block represents a SodaCL check that can be used when running Soda scans. Args: sodacl_yaml_path (str): Absolute path of the Soda Checks file. sodacl_yaml_str (str): Optional YAML string containing the Soda Checks details. If provided, it will be saved at the path provided with `sodacl_yaml_path`. Example: ```python from prefect_soda_core.sodacl_check import SodaCLCheck sodacl_check_block = SodaCLCheck.load(\"BLOCK_NAME\") ``` \"\"\" sodacl_yaml_path : str sodacl_yaml_str : Optional [ str ] _block_type_name : Optional [ str ] = \"SodaCL Check\" _logo_url : Optional [ HttpUrl ] = \"https://www.to.do\" # noqa @root_validator ( pre = True ) def check_block_configuration ( cls , values ): \"\"\" Ensure that the check configuration options are valid. A check configuration is valid if it provides just the path to the YAML Soda checks file or if it has both the path to the Soda checks file and a valid YAML Soda checks string. Raises: SodaConfigurationException: When the provided checks configuration is not valid. \"\"\" sodacl_yaml_str_exists = bool ( values . get ( \"sodacl_yaml_str\" )) # If the YAML string is passed, but is not a valid YAML, then raise error if sodacl_yaml_str_exists : try : yaml_str = values . get ( \"sodacl_yaml_str\" ) safe_load ( yaml_str ) except YAMLError as exc : msg = f \"The provided checks YAML is not valid. Error is: { exc } \" raise SodaConfigurationException ( msg ) return values def persist_checks ( self ): \"\"\" Persist Soda checks on the file system, if necessary. Please note that, if the path already exists, it will be overwritten. \"\"\" # If a YAML string and path are passed, then persist the configuration if self . sodacl_yaml_str and self . sodacl_yaml_path : with open ( self . sodacl_yaml_path , \"w\" ) as f : safe_dump ( data = self . sodacl_yaml_str , stream = f ) check_block_configuration Ensure that the check configuration options are valid. A check configuration is valid if it provides just the path to the YAML Soda checks file or if it has both the path to the Soda checks file and a valid YAML Soda checks string. Raises: Type Description SodaConfigurationException When the provided checks configuration is not valid. Source code in prefect_soda_core/sodacl_check.py 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 @root_validator ( pre = True ) def check_block_configuration ( cls , values ): \"\"\" Ensure that the check configuration options are valid. A check configuration is valid if it provides just the path to the YAML Soda checks file or if it has both the path to the Soda checks file and a valid YAML Soda checks string. Raises: SodaConfigurationException: When the provided checks configuration is not valid. \"\"\" sodacl_yaml_str_exists = bool ( values . get ( \"sodacl_yaml_str\" )) # If the YAML string is passed, but is not a valid YAML, then raise error if sodacl_yaml_str_exists : try : yaml_str = values . get ( \"sodacl_yaml_str\" ) safe_load ( yaml_str ) except YAMLError as exc : msg = f \"The provided checks YAML is not valid. Error is: { exc } \" raise SodaConfigurationException ( msg ) return values persist_checks Persist Soda checks on the file system, if necessary. Please note that, if the path already exists, it will be overwritten. Source code in prefect_soda_core/sodacl_check.py 60 61 62 63 64 65 66 67 68 69 def persist_checks ( self ): \"\"\" Persist Soda checks on the file system, if necessary. Please note that, if the path already exists, it will be overwritten. \"\"\" # If a YAML string and path are passed, then persist the configuration if self . sodacl_yaml_str and self . sodacl_yaml_path : with open ( self . sodacl_yaml_path , \"w\" ) as f : safe_dump ( data = self . sodacl_yaml_str , stream = f )","title":"Checks"},{"location":"checks/#prefect_soda_core.sodacl_check","text":"SodaCL check block","title":"sodacl_check"},{"location":"checks/#prefect_soda_core.sodacl_check.SodaCLCheck","text":"This block represents a SodaCL check that can be used when running Soda scans. Parameters: Name Type Description Default sodacl_yaml_path str Absolute path of the Soda Checks file. required sodacl_yaml_str str Optional YAML string containing the Soda Checks details. If provided, it will be saved at the path provided with sodacl_yaml_path . required Example from prefect_soda_core.sodacl_check import SodaCLCheck sodacl_check_block = SodaCLCheck . load ( \"BLOCK_NAME\" ) Source code in prefect_soda_core/sodacl_check.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 class SodaCLCheck ( Block ): \"\"\" This block represents a SodaCL check that can be used when running Soda scans. Args: sodacl_yaml_path (str): Absolute path of the Soda Checks file. sodacl_yaml_str (str): Optional YAML string containing the Soda Checks details. If provided, it will be saved at the path provided with `sodacl_yaml_path`. Example: ```python from prefect_soda_core.sodacl_check import SodaCLCheck sodacl_check_block = SodaCLCheck.load(\"BLOCK_NAME\") ``` \"\"\" sodacl_yaml_path : str sodacl_yaml_str : Optional [ str ] _block_type_name : Optional [ str ] = \"SodaCL Check\" _logo_url : Optional [ HttpUrl ] = \"https://www.to.do\" # noqa @root_validator ( pre = True ) def check_block_configuration ( cls , values ): \"\"\" Ensure that the check configuration options are valid. A check configuration is valid if it provides just the path to the YAML Soda checks file or if it has both the path to the Soda checks file and a valid YAML Soda checks string. Raises: SodaConfigurationException: When the provided checks configuration is not valid. \"\"\" sodacl_yaml_str_exists = bool ( values . get ( \"sodacl_yaml_str\" )) # If the YAML string is passed, but is not a valid YAML, then raise error if sodacl_yaml_str_exists : try : yaml_str = values . get ( \"sodacl_yaml_str\" ) safe_load ( yaml_str ) except YAMLError as exc : msg = f \"The provided checks YAML is not valid. Error is: { exc } \" raise SodaConfigurationException ( msg ) return values def persist_checks ( self ): \"\"\" Persist Soda checks on the file system, if necessary. Please note that, if the path already exists, it will be overwritten. \"\"\" # If a YAML string and path are passed, then persist the configuration if self . sodacl_yaml_str and self . sodacl_yaml_path : with open ( self . sodacl_yaml_path , \"w\" ) as f : safe_dump ( data = self . sodacl_yaml_str , stream = f )","title":"SodaCLCheck"},{"location":"checks/#prefect_soda_core.sodacl_check.SodaCLCheck.check_block_configuration","text":"Ensure that the check configuration options are valid. A check configuration is valid if it provides just the path to the YAML Soda checks file or if it has both the path to the Soda checks file and a valid YAML Soda checks string. Raises: Type Description SodaConfigurationException When the provided checks configuration is not valid. Source code in prefect_soda_core/sodacl_check.py 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 @root_validator ( pre = True ) def check_block_configuration ( cls , values ): \"\"\" Ensure that the check configuration options are valid. A check configuration is valid if it provides just the path to the YAML Soda checks file or if it has both the path to the Soda checks file and a valid YAML Soda checks string. Raises: SodaConfigurationException: When the provided checks configuration is not valid. \"\"\" sodacl_yaml_str_exists = bool ( values . get ( \"sodacl_yaml_str\" )) # If the YAML string is passed, but is not a valid YAML, then raise error if sodacl_yaml_str_exists : try : yaml_str = values . get ( \"sodacl_yaml_str\" ) safe_load ( yaml_str ) except YAMLError as exc : msg = f \"The provided checks YAML is not valid. Error is: { exc } \" raise SodaConfigurationException ( msg ) return values","title":"check_block_configuration()"},{"location":"checks/#prefect_soda_core.sodacl_check.SodaCLCheck.persist_checks","text":"Persist Soda checks on the file system, if necessary. Please note that, if the path already exists, it will be overwritten. Source code in prefect_soda_core/sodacl_check.py 60 61 62 63 64 65 66 67 68 69 def persist_checks ( self ): \"\"\" Persist Soda checks on the file system, if necessary. Please note that, if the path already exists, it will be overwritten. \"\"\" # If a YAML string and path are passed, then persist the configuration if self . sodacl_yaml_str and self . sodacl_yaml_path : with open ( self . sodacl_yaml_path , \"w\" ) as f : safe_dump ( data = self . sodacl_yaml_str , stream = f )","title":"persist_checks()"},{"location":"configuration/","text":"prefect_soda_core.soda_configuration Soda configuration block SodaConfiguration This block can be used to provide the configuration required to run Soda scans. For more information, please refer to the official docs # noqa Parameters: Name Type Description Default configuration_yaml_path str Absolute path of the Soda configuration file. required configuration_yaml_str str Optional YAML string containing the Soda configuration details. If provided, it will be saved at the path provided with configuration_yaml_path . required Example Load stored Soda configuration. from prefect_soda_core.soda_configuration import SodaConfiguration soda_configuration_block = SodaConfiguration . load ( \"BLOCK_NAME\" ) Source code in prefect_soda_core/soda_configuration.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 class SodaConfiguration ( Block ): \"\"\" This block can be used to provide the configuration required to run Soda scans. For more information, please refer to the [official docs](https://docs.soda.io/soda-core/configuration.html#configuration-instructions) # noqa Args: configuration_yaml_path (str): Absolute path of the Soda configuration file. configuration_yaml_str (str): Optional YAML string containing the Soda configuration details. If provided, it will be saved at the path provided with `configuration_yaml_path`. Example: Load stored Soda configuration. ```python from prefect_soda_core.soda_configuration import SodaConfiguration soda_configuration_block = SodaConfiguration.load(\"BLOCK_NAME\") ``` \"\"\" configuration_yaml_path : str configuration_yaml_str : Optional [ str ] _block_type_name : Optional [ str ] = \"Soda Configuration\" _logo_url : Optional [ HttpUrl ] = \"https://www.TODO.todo\" # noqa @root_validator ( pre = True ) def check_block_configuration ( cls , values ): \"\"\" Ensure that the configuration options are valid. A configuration is valid if it provides just the path to the YAML configuration file or if it has both the path to the configuration file and a valid YAML configuration string. Raises: SodaConfigurationException: When the provided configuration is not valid. \"\"\" configuration_yaml_str_exists = bool ( values . get ( \"configuration_yaml_str\" )) # If the YAML string is passed, but is not a valid YAML, then raise error if configuration_yaml_str_exists : try : yaml_str = values . get ( \"configuration_yaml_str\" ) safe_load ( yaml_str ) except YAMLError as exc : msg = f \"The provided configuration YAML is not valid. Error is: { exc } \" raise SodaConfigurationException ( msg ) return values def persist_configuration ( self ): \"\"\" Persist Soda configuration on the file system, if necessary. Please note that, if the path already exists, it will be overwritten. \"\"\" # If a YAML string and path are passed, then persist the configuration if self . configuration_yaml_str and self . configuration_yaml_path : with open ( self . configuration_yaml_path , \"w\" ) as f : safe_dump ( data = self . configuration_yaml_str , stream = f ) check_block_configuration Ensure that the configuration options are valid. A configuration is valid if it provides just the path to the YAML configuration file or if it has both the path to the configuration file and a valid YAML configuration string. Raises: Type Description SodaConfigurationException When the provided configuration is not valid. Source code in prefect_soda_core/soda_configuration.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 @root_validator ( pre = True ) def check_block_configuration ( cls , values ): \"\"\" Ensure that the configuration options are valid. A configuration is valid if it provides just the path to the YAML configuration file or if it has both the path to the configuration file and a valid YAML configuration string. Raises: SodaConfigurationException: When the provided configuration is not valid. \"\"\" configuration_yaml_str_exists = bool ( values . get ( \"configuration_yaml_str\" )) # If the YAML string is passed, but is not a valid YAML, then raise error if configuration_yaml_str_exists : try : yaml_str = values . get ( \"configuration_yaml_str\" ) safe_load ( yaml_str ) except YAMLError as exc : msg = f \"The provided configuration YAML is not valid. Error is: { exc } \" raise SodaConfigurationException ( msg ) return values persist_configuration Persist Soda configuration on the file system, if necessary. Please note that, if the path already exists, it will be overwritten. Source code in prefect_soda_core/soda_configuration.py 63 64 65 66 67 68 69 70 71 72 def persist_configuration ( self ): \"\"\" Persist Soda configuration on the file system, if necessary. Please note that, if the path already exists, it will be overwritten. \"\"\" # If a YAML string and path are passed, then persist the configuration if self . configuration_yaml_str and self . configuration_yaml_path : with open ( self . configuration_yaml_path , \"w\" ) as f : safe_dump ( data = self . configuration_yaml_str , stream = f )","title":"Configuration"},{"location":"configuration/#prefect_soda_core.soda_configuration","text":"Soda configuration block","title":"soda_configuration"},{"location":"configuration/#prefect_soda_core.soda_configuration.SodaConfiguration","text":"This block can be used to provide the configuration required to run Soda scans. For more information, please refer to the official docs # noqa Parameters: Name Type Description Default configuration_yaml_path str Absolute path of the Soda configuration file. required configuration_yaml_str str Optional YAML string containing the Soda configuration details. If provided, it will be saved at the path provided with configuration_yaml_path . required Example Load stored Soda configuration. from prefect_soda_core.soda_configuration import SodaConfiguration soda_configuration_block = SodaConfiguration . load ( \"BLOCK_NAME\" ) Source code in prefect_soda_core/soda_configuration.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 class SodaConfiguration ( Block ): \"\"\" This block can be used to provide the configuration required to run Soda scans. For more information, please refer to the [official docs](https://docs.soda.io/soda-core/configuration.html#configuration-instructions) # noqa Args: configuration_yaml_path (str): Absolute path of the Soda configuration file. configuration_yaml_str (str): Optional YAML string containing the Soda configuration details. If provided, it will be saved at the path provided with `configuration_yaml_path`. Example: Load stored Soda configuration. ```python from prefect_soda_core.soda_configuration import SodaConfiguration soda_configuration_block = SodaConfiguration.load(\"BLOCK_NAME\") ``` \"\"\" configuration_yaml_path : str configuration_yaml_str : Optional [ str ] _block_type_name : Optional [ str ] = \"Soda Configuration\" _logo_url : Optional [ HttpUrl ] = \"https://www.TODO.todo\" # noqa @root_validator ( pre = True ) def check_block_configuration ( cls , values ): \"\"\" Ensure that the configuration options are valid. A configuration is valid if it provides just the path to the YAML configuration file or if it has both the path to the configuration file and a valid YAML configuration string. Raises: SodaConfigurationException: When the provided configuration is not valid. \"\"\" configuration_yaml_str_exists = bool ( values . get ( \"configuration_yaml_str\" )) # If the YAML string is passed, but is not a valid YAML, then raise error if configuration_yaml_str_exists : try : yaml_str = values . get ( \"configuration_yaml_str\" ) safe_load ( yaml_str ) except YAMLError as exc : msg = f \"The provided configuration YAML is not valid. Error is: { exc } \" raise SodaConfigurationException ( msg ) return values def persist_configuration ( self ): \"\"\" Persist Soda configuration on the file system, if necessary. Please note that, if the path already exists, it will be overwritten. \"\"\" # If a YAML string and path are passed, then persist the configuration if self . configuration_yaml_str and self . configuration_yaml_path : with open ( self . configuration_yaml_path , \"w\" ) as f : safe_dump ( data = self . configuration_yaml_str , stream = f )","title":"SodaConfiguration"},{"location":"configuration/#prefect_soda_core.soda_configuration.SodaConfiguration.check_block_configuration","text":"Ensure that the configuration options are valid. A configuration is valid if it provides just the path to the YAML configuration file or if it has both the path to the configuration file and a valid YAML configuration string. Raises: Type Description SodaConfigurationException When the provided configuration is not valid. Source code in prefect_soda_core/soda_configuration.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 @root_validator ( pre = True ) def check_block_configuration ( cls , values ): \"\"\" Ensure that the configuration options are valid. A configuration is valid if it provides just the path to the YAML configuration file or if it has both the path to the configuration file and a valid YAML configuration string. Raises: SodaConfigurationException: When the provided configuration is not valid. \"\"\" configuration_yaml_str_exists = bool ( values . get ( \"configuration_yaml_str\" )) # If the YAML string is passed, but is not a valid YAML, then raise error if configuration_yaml_str_exists : try : yaml_str = values . get ( \"configuration_yaml_str\" ) safe_load ( yaml_str ) except YAMLError as exc : msg = f \"The provided configuration YAML is not valid. Error is: { exc } \" raise SodaConfigurationException ( msg ) return values","title":"check_block_configuration()"},{"location":"configuration/#prefect_soda_core.soda_configuration.SodaConfiguration.persist_configuration","text":"Persist Soda configuration on the file system, if necessary. Please note that, if the path already exists, it will be overwritten. Source code in prefect_soda_core/soda_configuration.py 63 64 65 66 67 68 69 70 71 72 def persist_configuration ( self ): \"\"\" Persist Soda configuration on the file system, if necessary. Please note that, if the path already exists, it will be overwritten. \"\"\" # If a YAML string and path are passed, then persist the configuration if self . configuration_yaml_str and self . configuration_yaml_path : with open ( self . configuration_yaml_path , \"w\" ) as f : safe_dump ( data = self . configuration_yaml_str , stream = f )","title":"persist_configuration()"},{"location":"exceptions/","text":"prefect_soda_core.exceptions Exceptions to raise in case of issues while configuring or running Soda. SodaConfigurationException Exception to raise in case of issues with Soda configuration. Source code in prefect_soda_core/exceptions.py 6 7 8 9 10 11 class SodaConfigurationException ( Exception ): \"\"\" Exception to raise in case of issues with Soda configuration. \"\"\" pass","title":"Exceptions"},{"location":"exceptions/#prefect_soda_core.exceptions","text":"Exceptions to raise in case of issues while configuring or running Soda.","title":"exceptions"},{"location":"exceptions/#prefect_soda_core.exceptions.SodaConfigurationException","text":"Exception to raise in case of issues with Soda configuration. Source code in prefect_soda_core/exceptions.py 6 7 8 9 10 11 class SodaConfigurationException ( Exception ): \"\"\" Exception to raise in case of issues with Soda configuration. \"\"\" pass","title":"SodaConfigurationException"},{"location":"tasks/","text":"prefect_soda_core.tasks Collection of tasks that can be used to run Data Quality checks using Soda Core. soda_scan_execute async Task that execute a Soda Scan. First, the scan is created and configured using the provided configuration, checks, and other options, and then it is executed against the provided data source. Parameters: Name Type Description Default data_source_name str The name of the data source against which the checks will be executed. The data source name must match one of the data sources provided in the configuration object. required configuration SodaConfiguration SodaConfiguration object that will be used to configure the scan before its execution. required checks SodaCLCheck SodaCLCheck object that will be used, together with configuration , to configure the scan before its execution. required variables Optional [ Dict [ str , str ]] A Dict[str, str] that contains all variables references within checks. required verbose bool Whether to run the checks with a verbose log or not. Default to False . False Returns: Type Description Union [ List , str ] Logs produced by running soda scan CLI command. Example from prefect_soda_core.sodacl_check import SodaCLCheck from prefect_soda_core.soda_configuration import SodaConfiguration from prefect_soda_core.tasks import soda_scan_execute from prefect import flow sodacl_check_block = SodaCLCheck . load ( \"SODACL_CHECK_BLOCK_NAME\" ) soda_configuration_block = SodaConfiguration . load ( \"SODA_CONF_BLOCK_NAME\" ) @flow def run_soda_scan (): return soda_scan_execute ( data_source_name = \"datasource\" , configuration = soda_configuration_block , checks = sodacl_check_block , variables = { \"key\" : \"value\" }, verbose = False ) Source code in prefect_soda_core/tasks.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 @task async def soda_scan_execute ( data_source_name : str , configuration : SodaConfiguration , checks : SodaCLCheck , variables : Optional [ Dict [ str , str ]], verbose : bool = False , ) -> Union [ List , str ]: \"\"\" Task that execute a Soda Scan. First, the scan is created and configured using the provided configuration, checks, and other options, and then it is executed against the provided data source. Args: data_source_name: The name of the data source against which the checks will be executed. The data source name must match one of the data sources provided in the `configuration` object. configuration: `SodaConfiguration` object that will be used to configure the scan before its execution. checks: `SodaCLCheck` object that will be used, together with `configuration`, to configure the scan before its execution. variables: A `Dict[str, str]` that contains all variables references within checks. verbose: Whether to run the checks with a verbose log or not. Default to `False`. Raises: `RuntimeError` in case `soda scan` encounters any error during execution. Returns: Logs produced by running `soda scan` CLI command. Example: ```python from prefect_soda_core.sodacl_check import SodaCLCheck from prefect_soda_core.soda_configuration import SodaConfiguration from prefect_soda_core.tasks import soda_scan_execute from prefect import flow sodacl_check_block = SodaCLCheck.load(\"SODACL_CHECK_BLOCK_NAME\") soda_configuration_block = SodaConfiguration.load(\"SODA_CONF_BLOCK_NAME\") @flow def run_soda_scan(): return soda_scan_execute( data_source_name=\"datasource\", configuration=soda_configuration_block, checks=sodacl_check_block, variables={\"key\": \"value\"}, verbose=False ) ``` \"\"\" # Persist the configuration on the file system, if necessary configuration . persist_configuration () # Perists checks on the file system, if necessary checks . persist_checks () # Soda command initial definition command = ( f \"soda scan -d { data_source_name } -c { configuration . configuration_yaml_path } \" ) # If variables are provided, add the to Soda command if variables : var_str = \"\" . join ( [ f '-v \" { var_name } = { var_value } \" ' for var_name , var_value in variables . items () ] ) command = f \" { command } { var_str } \" # If verbose logging is requested, add corresponding option to Soda command if verbose : command = f \" { command } -V\" # Build final Soda command command = f \" { command } { checks . sodacl_yaml_path } \" # Log Soda command for debuggin purpose get_run_logger () . debug ( f \"Soda requested command is: { command } \" ) # Execute Soda command soda_logs = await shell_run_command . fn ( command = command , return_all = True ) return soda_logs","title":"Tasks"},{"location":"tasks/#prefect_soda_core.tasks","text":"Collection of tasks that can be used to run Data Quality checks using Soda Core.","title":"tasks"},{"location":"tasks/#prefect_soda_core.tasks.soda_scan_execute","text":"Task that execute a Soda Scan. First, the scan is created and configured using the provided configuration, checks, and other options, and then it is executed against the provided data source. Parameters: Name Type Description Default data_source_name str The name of the data source against which the checks will be executed. The data source name must match one of the data sources provided in the configuration object. required configuration SodaConfiguration SodaConfiguration object that will be used to configure the scan before its execution. required checks SodaCLCheck SodaCLCheck object that will be used, together with configuration , to configure the scan before its execution. required variables Optional [ Dict [ str , str ]] A Dict[str, str] that contains all variables references within checks. required verbose bool Whether to run the checks with a verbose log or not. Default to False . False Returns: Type Description Union [ List , str ] Logs produced by running soda scan CLI command. Example from prefect_soda_core.sodacl_check import SodaCLCheck from prefect_soda_core.soda_configuration import SodaConfiguration from prefect_soda_core.tasks import soda_scan_execute from prefect import flow sodacl_check_block = SodaCLCheck . load ( \"SODACL_CHECK_BLOCK_NAME\" ) soda_configuration_block = SodaConfiguration . load ( \"SODA_CONF_BLOCK_NAME\" ) @flow def run_soda_scan (): return soda_scan_execute ( data_source_name = \"datasource\" , configuration = soda_configuration_block , checks = sodacl_check_block , variables = { \"key\" : \"value\" }, verbose = False ) Source code in prefect_soda_core/tasks.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 @task async def soda_scan_execute ( data_source_name : str , configuration : SodaConfiguration , checks : SodaCLCheck , variables : Optional [ Dict [ str , str ]], verbose : bool = False , ) -> Union [ List , str ]: \"\"\" Task that execute a Soda Scan. First, the scan is created and configured using the provided configuration, checks, and other options, and then it is executed against the provided data source. Args: data_source_name: The name of the data source against which the checks will be executed. The data source name must match one of the data sources provided in the `configuration` object. configuration: `SodaConfiguration` object that will be used to configure the scan before its execution. checks: `SodaCLCheck` object that will be used, together with `configuration`, to configure the scan before its execution. variables: A `Dict[str, str]` that contains all variables references within checks. verbose: Whether to run the checks with a verbose log or not. Default to `False`. Raises: `RuntimeError` in case `soda scan` encounters any error during execution. Returns: Logs produced by running `soda scan` CLI command. Example: ```python from prefect_soda_core.sodacl_check import SodaCLCheck from prefect_soda_core.soda_configuration import SodaConfiguration from prefect_soda_core.tasks import soda_scan_execute from prefect import flow sodacl_check_block = SodaCLCheck.load(\"SODACL_CHECK_BLOCK_NAME\") soda_configuration_block = SodaConfiguration.load(\"SODA_CONF_BLOCK_NAME\") @flow def run_soda_scan(): return soda_scan_execute( data_source_name=\"datasource\", configuration=soda_configuration_block, checks=sodacl_check_block, variables={\"key\": \"value\"}, verbose=False ) ``` \"\"\" # Persist the configuration on the file system, if necessary configuration . persist_configuration () # Perists checks on the file system, if necessary checks . persist_checks () # Soda command initial definition command = ( f \"soda scan -d { data_source_name } -c { configuration . configuration_yaml_path } \" ) # If variables are provided, add the to Soda command if variables : var_str = \"\" . join ( [ f '-v \" { var_name } = { var_value } \" ' for var_name , var_value in variables . items () ] ) command = f \" { command } { var_str } \" # If verbose logging is requested, add corresponding option to Soda command if verbose : command = f \" { command } -V\" # Build final Soda command command = f \" { command } { checks . sodacl_yaml_path } \" # Log Soda command for debuggin purpose get_run_logger () . debug ( f \"Soda requested command is: { command } \" ) # Execute Soda command soda_logs = await shell_run_command . fn ( command = command , return_all = True ) return soda_logs","title":"soda_scan_execute()"}]}